{"version":3,"sources":["logo.svg","components/Square.js","components/Board.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","onClick","style","backgroundColor","value","Board","i","this","squares","renderSquare","Component","Game","state","redNext","stepNumber","history","Array","fill","step","setState","slice","length","calculateWinner","concat","status","current","winner","moves","map","move","desc","jumpTo","handleClick","a","b","c","d","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a336a31c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\n\r\nexport default function Square(props) {\r\n    return (\r\n        // Create the button with onClick event and a bg that can be changed dynamically\r\n        // Display the value of the button as it's name\r\n        <button className = \"square\" onClick={props.onClick} style={{backgroundColor:props.value}}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport Square from './Square';\r\n\r\nexport default class Board extends Component {\r\n    // Function to render a square\r\n    renderSquare(i) {\r\n        return <Square value = {this.props.squares[i]}\r\n        onClick = {()=>this.props.onClick(i)}\r\n        />\r\n    }\r\n    // Actual render function:\r\n    // Each div represents one row, made up of 7 columns\r\n    // 6 divs each rendering 7 squares for a 6x7 board\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className = \"border-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                    {this.renderSquare(6)}\r\n                </div>\r\n                <div className = \"border-row\">\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                    {this.renderSquare(9)}\r\n                    {this.renderSquare(10)}\r\n                    {this.renderSquare(11)}\r\n                    {this.renderSquare(12)}\r\n                    {this.renderSquare(13)}\r\n                </div>\r\n                <div className = \"border-row\">\r\n                    {this.renderSquare(14)}\r\n                    {this.renderSquare(15)}\r\n                    {this.renderSquare(16)}\r\n                    {this.renderSquare(17)}\r\n                    {this.renderSquare(18)}\r\n                    {this.renderSquare(19)}\r\n                    {this.renderSquare(20)}\r\n                </div>\r\n                <div className = \"border-row\">\r\n                    {this.renderSquare(21)}\r\n                    {this.renderSquare(22)}\r\n                    {this.renderSquare(23)}\r\n                    {this.renderSquare(24)}\r\n                    {this.renderSquare(25)}\r\n                    {this.renderSquare(26)}\r\n                    {this.renderSquare(27)}\r\n                </div>\r\n                <div className = \"border-row\">\r\n                    {this.renderSquare(28)}\r\n                    {this.renderSquare(29)}\r\n                    {this.renderSquare(30)}\r\n                    {this.renderSquare(31)}\r\n                    {this.renderSquare(32)}\r\n                    {this.renderSquare(33)}\r\n                    {this.renderSquare(34)}\r\n                </div>\r\n                <div className = \"border-row\">\r\n                    {this.renderSquare(35)}\r\n                    {this.renderSquare(36)}\r\n                    {this.renderSquare(37)}\r\n                    {this.renderSquare(38)}\r\n                    {this.renderSquare(39)}\r\n                    {this.renderSquare(40)}\r\n                    {this.renderSquare(41)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Board from './Board';\r\n\r\nexport default class Game extends Component {\r\n    \r\n    // Constructor for component\r\n    constructor(props) {\r\n        // Super function\r\n        super(props);\r\n        // Set needed states for the game to work and record history of the game\r\n        this.state = {\r\n            // Red goes first\r\n            redNext: true,\r\n            stepNumber: 0,\r\n            // History array can only grow as large as there are squares\r\n            history: [\r\n                { squares: Array(42).fill(null) }\r\n            ]\r\n        }\r\n    }\r\n\r\n    // jumpTo function to jump to any state throughout the game\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            redNext: (step%2)===0\r\n        })\r\n    }\r\n\r\n    // Handle click function\r\n    handleClick(i) {\r\n        // Update the history with the current state and advance the step num\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        // Check if there is a winner\r\n        // If there is, nothing will happen when a square is clicked\r\n        // Nothing will happen if an occupied square is clicked either\r\n        const winner = calculateWinner(squares);\r\n        if (winner || squares[i]) {\r\n            return;\r\n        }\r\n        // Set the value of the square depending on the current player turn\r\n        squares[i] = this.state.redNext?'red':'yellow';\r\n        // Update the state of the game\r\n        this.setState({\r\n            history: history.concat({\r\n                squares: squares\r\n            }),\r\n            redNext: !this.state.redNext,\r\n            stepNumber: history.length\r\n        })\r\n    }\r\n\r\n    // Render function to display the game\r\n    render() {\r\n\r\n        // Create constants for current values to be displayed\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        // List of moves made of buttons to jump to whichever step in te game\r\n        const moves = history.map((step, move) => {\r\n            // Desc variable for the labels of the buttons\r\n            const desc = move? 'Go to #' + move:'Start the Game';\r\n            return (\r\n                <li key = {move}>\r\n                    <button onClick ={() => {this.jumpTo(move)}}>\r\n                        {desc}\r\n                    </button>\r\n                </li>\r\n            )\r\n        });\r\n        // Status variable to display if the game is won, or which turn it is\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner is ' + winner;\r\n        } else {\r\n            status = 'Next Player is ' + (this.state.redNext? 'Red':'Yellow');\r\n        }\r\n\r\n        // Return values with divs that display the board\r\n        return (\r\n            <div className = \"game\">\r\n                <div className = \"game-board\">\r\n                    <Board onClick = {(i)=>this.handleClick(i)}\r\n                    squares = {current.squares} />\r\n                </div>\r\n                <div className = \"game-info\">\r\n                    <div>{status}</div>\r\n                    <ul>{moves}</ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n\r\n    // Not including diagonals\r\n\r\n    // Checking the horizontals\r\n    for (let i = 0; i < 42; i++) {\r\n        if (i < 4 || 6 < i < 11 || 13 < i < 18 || 20 < i < 25\r\n            || 27 < i < 32 || 34 < i < 39) {\r\n                \r\n                const [a, b, c, d] = [i, i + 1, i + 2, i + 3];\r\n                if (squares[a] && squares[a] === squares[b] &&\r\n                    squares[b] === squares[c] && squares[c] === squares[d]) {\r\n                        return squares[a];\r\n                    }\r\n            }\r\n    }\r\n\r\n    // Checking the verticals\r\n    for (let i = 0; i < 21; i++) {\r\n        const [a, b, c, d] = [i, i + 7, i + 14, i + 21];\r\n        if (squares[a] && squares[a] === squares[b] &&\r\n            squares[b] === squares[c] && squares[c] === squares[d]) {\r\n                return squares[a];\r\n            }\r\n    }\r\n\r\n    // Default if there are no winners\r\n    return null;\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    // Run the Game.js file\n    <Game/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}